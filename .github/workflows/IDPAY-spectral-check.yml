name: Validate OpenAPI YAML/TPL files with Spectral

on:
  pull_request:
    paths:
      - 'src/idpay/apim/api/**'
  push:
    branches:
      - main
    paths:
      - 'src/idpay/apim/api/**'

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  validate-openapi:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Spectral CLI and rulesets
        run: |
          npm install -g @stoplight/spectral-cli
          npm install @stoplight/spectral-owasp-ruleset

      - name: Validate OpenAPI YAML/TPL files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          summary=""
          failed_files=()
          failed=0

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üìÇ Running in PR context. Fetching modified files..."
            modified_files=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
              | jq -r '.[].filename')

            touched_files=$(echo "$modified_files" | grep -E '^src/idpay/apim/api/openapi.*\.(yml|yaml|yml.tpl|yaml.tpl)$' || true)
          else
            echo "üìÇ Not a PR. Validating ALL OpenAPI files in repo..."
            touched_files=$(find src/idpay/apim/api -type f \( \
              -name "openapi*.yml" \
              -o -name "openapi*.yaml" \
              -o -name "openapi*.yml.tpl" \
              -o -name "openapi*.yaml.tpl" \
            \) || true)
          fi

          if [ -z "$touched_files" ]; then
            echo "‚úÖ No OpenAPI files to validate."
            exit 0
          fi

          echo "üìÇ OpenAPI files to validate:"
          echo "$touched_files"

          for file in $touched_files; do
            echo "üîé Validating OpenAPI file: $file"
            output=$(spectral lint -r node_modules/@stoplight/spectral-owasp-ruleset/dist/ruleset.mjs "$file" 2>&1 || true)
            exit_code=$?

            echo "$output"

            if [ $exit_code -eq 0 ]; then
              echo "‚úÖ $file: PASSED"
              summary="$summary\n‚úÖ $file: PASSED"
            else
              echo "‚ùå $file: FAILED (exit code $exit_code)"
              summary="$summary\n‚ùå $file: FAILED"
              failed_files+=("$file")
              failed=1
            fi
          done

          echo -e "\nüìã Validation Summary:"
          echo -e "$summary"

          if [ $failed -eq 1 ]; then
            echo "‚ùå Found ${#failed_files[@]} OpenAPI file(s) with errors."

            if [ "${{ github.event_name }}" = "pull_request" ]; then
              curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -X POST \
                -d "{\"body\": \"‚ùå **OpenAPI validation failed**\n\n$summary\"}" \
                "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
            fi

            exit 1
          else
            echo "‚úÖ All OpenAPI files passed validation."
          fi
