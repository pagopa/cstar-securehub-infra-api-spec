name: Validate changed OpenAPI files with Spectral

on:
  pull_request:
    paths:
      - 'src/idpay/apim/api/**' # ascolta le modifiche dentro api

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  validate-openapi:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # recupera tutta la storia git per fare il diff

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Spectral CLI and rulesets
        run: |
          npm install -g @stoplight/spectral-cli
          npm install @stoplight/spectral-owasp-ruleset

      - name: Find and validate modified OpenAPI files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìÇ Detecting OpenAPI files changed in PR..."
          summary=""
          failed_files=()
          failed=0

          # Trova la base SHA della PR
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          echo "üîó Comparing changes from base SHA: $BASE_SHA"

          # Lista dei file modificati tra base e HEAD
          modified_files=$(git diff --name-only "$BASE_SHA"...HEAD)
          echo "$modified_files" > all_modified_files.txt

          # Filtra solo gli OpenAPI
          openapi_files=$(grep -E '^src/idpay/apim/api/openapi.*\.(yml|yaml|yml.tpl|yaml.tpl)$' all_modified_files.txt || true)

          if [ -z "$openapi_files" ]; then
            echo "‚úÖ No OpenAPI files were modified in this PR."
            exit 0
          fi

          echo "üìÇ OpenAPI files to validate:"
          echo "$openapi_files"

          for file in $openapi_files; do
            echo "üîé Validating OpenAPI file: $file"
            output=$(spectral lint -r node_modules/@stoplight/spectral-owasp-ruleset/dist/ruleset.mjs "$file" 2>&1 || true)
            exit_code=$?

            echo "$output"

            if [ $exit_code -eq 0 ]; then
              echo "‚úÖ $file: PASSED"
              summary="$summary\n‚úÖ $file: PASSED"
            else
              echo "‚ùå $file: FAILED (exit code $exit_code)"
              summary="$summary\n‚ùå $file: FAILED"
              failed_files+=("$file")
              failed=1
            fi
          done

          echo -e "\nüìã Validation Summary:"
          echo -e "$summary"

          if [ $failed -eq 1 ]; then
            echo "‚ùå Found ${#failed_files[@]} OpenAPI file(s) with errors."

            # üì£ Commento automatico nella PR
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X POST \
              -d "{\"body\": \"‚ùå **OpenAPI validation failed**\n\n$summary\"}" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

            exit 1
          else
            echo "‚úÖ All modified OpenAPI files passed validation."
          fi
