name: Validate OpenAPI YAML/TPL files with Spectral

on:
  pull_request:
    paths:
      - 'src/idpay/apim/api/**'

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  validate-openapi:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Spectral CLI and rulesets
        run: |
          npm install -g @stoplight/spectral-cli
          npm install @stoplight/spectral-owasp-ruleset

      - name: Get list of modified files from GitHub API
        run: |
          echo "📂 Fetching modified files in PR from GitHub API..."
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
            | jq -r '.[].filename' > modified_files.txt

          echo "📄 Files modified in this PR:"
          cat modified_files.txt

      - name: Validate OpenAPI YAML/TPL files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          summary=""
          failed_files=()
          failed=0
          total_errors=0
          total_warnings=0

          echo "🔍 Filtering OpenAPI files..."
          openapi_files=$(grep -E '^src/idpay/apim/api/.*openapi.*\.(yml|yaml|yml.tpl|yaml.tpl)$' modified_files.txt || true)

          if [ -z "$openapi_files" ]; then
            echo "✅ No OpenAPI files were modified in this PR."
            exit 0
          fi

          echo "📂 OpenAPI files to validate:"
          echo "$openapi_files"

          for file in $openapi_files; do
            echo "🔎 Validating OpenAPI file: $file"
            set +e
            lint_output=$(spectral lint --format json -r node_modules/@stoplight/spectral-owasp-ruleset/dist/ruleset.mjs "$file" 2>&1)
            exit_code=$?
            set -e

            # ✅ Conta errori e warning dal JSON
            error_count=$(echo "$lint_output" | jq '[.[] | select(.severity == 0)] | length')
            warning_count=$(echo "$lint_output" | jq '[.[] | select(.severity == 1)] | length')

            total_errors=$((total_errors + error_count))
            total_warnings=$((total_warnings + warning_count))

            if [ $exit_code -eq 0 ]; then
              summary="$summary\n✅ **$file**: PASSED (0 errors, 0 warnings)"
            else
              summary="$summary\n❌ **$file**: FAILED\n* 🟥 Errors: $error_count\n* 🟨 Warnings: $warning_count\n\`\`\`json\n$lint_output\n\`\`\`"
              failed_files+=("$file")
              failed=1
            fi
          done

          # 📊 Riepilogo totale
          summary="$summary\n\n📊 **Total summary:**\n* 🟥 Total Errors: $total_errors\n* 🟨 Total Warnings: $total_warnings"

          echo -e "\n📋 Validation Summary:"
          echo -e "$summary"

          if [ $failed -eq 1 ]; then
            echo "❌ Found ${#failed_files[@]} OpenAPI file(s) with errors."

            # 📣 Commento automatico nella PR con errori e warning
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X POST \
              -d "{\"body\": \"❌ **OpenAPI validation failed**\n\n$summary\"}" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

            exit 1
          else
            echo "✅ All modified OpenAPI files passed validation."

            # 📣 Commento automatico nella PR per dire che è tutto OK
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -X POST \
              -d "{\"body\": \"✅ **OpenAPI validation passed**\n\n$summary\"}" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
