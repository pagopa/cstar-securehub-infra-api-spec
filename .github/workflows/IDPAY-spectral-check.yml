name: Validate OpenAPI YAML/TPL files with Spectral

on:
  pull_request:
    paths:
      - 'src/idpay/apim/api/**'
  push:
    branches:
      - main
    paths:
      - 'src/idpay/apim/api/**'

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  validate-openapi:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Spectral CLI and rulesets
        run: |
          npm install -g @stoplight/spectral-cli
          npm install @stoplight/spectral-owasp-ruleset

      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install gh -y

      - name: Find and validate modified OpenAPI files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Searching for modified OpenAPI YAML/TPL files..."
          summary=""
          failed_files=()
          failed=0

          touched_files=$(git diff --name-only origin/main...HEAD | grep -E '^src/idpay/apim/api/openapi.*\.(yml|yaml|yml.tpl|yaml.tpl)$' || true)

          if [ -z "$touched_files" ]; then
            echo "‚úÖ No OpenAPI files were modified in this PR."
            exit 0
          fi

          echo "üìÇ Modified OpenAPI files:"
          echo "$touched_files"

          for file in $touched_files; do
            echo "üîé Validating OpenAPI file: $file"
            output=$(spectral lint -r node_modules/@stoplight/spectral-owasp-ruleset/dist/ruleset.mjs "$file" 2>&1 || true)
            exit_code=$?

            echo "$output"

            if [ $exit_code -eq 0 ]; then
              echo "‚úÖ $file: PASSED"
              summary="$summary\n‚úÖ $file: PASSED"
            else
              echo "‚ùå $file: FAILED (exit code $exit_code)"
              summary="$summary\n‚ùå $file: FAILED"
              failed_files+=("$file")
              failed=1
            fi
          done

          echo -e "\nüìã Validation Summary:"
          echo -e "$summary"

          if [ $failed -eq 1 ]; then
            echo "‚ùå Found ${#failed_files[@]} OpenAPI file(s) with errors."

            # üì£ Commento automatico nella PR
            gh pr comment "$GITHUB_REF_NAME" \
              --body "‚ùå **OpenAPI validation failed**\n\n$summary"

            # üî• Blocca merge aggiornando lo stato
            gh api \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/statuses/${{ github.sha }} \
              -f state="failure" \
              -f description="OpenAPI validation failed" \
              -f context="OpenAPI Spectral Lint"

            exit 1
          else
            echo "‚úÖ All modified OpenAPI files passed validation."

            # ‚úÖ Permette merge
            gh api \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/statuses/${{ github.sha }} \
              -f state="success" \
              -f description="OpenAPI validation passed" \
              -f context="OpenAPI Spectral Lint"
          fi
