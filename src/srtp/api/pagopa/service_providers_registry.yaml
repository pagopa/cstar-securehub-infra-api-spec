openapi: 3.0.3

info:
  title: RTP Service Providers API
  version: 1.0.0
  description: |
    API to handle Technical Service Providers (TSPs) and Service Providers (SPs) which use PagoPA as RTP Service Provider.
  contact:
    name: PagoPA S.p.A.
    email: rtp@pagopa.it

servers:
  - description: Development/Test
    url: https://api-rtp.dev.cstar.pagopa.it/rtp/service_providers
    x-internal: true
  - description: User Acceptance Test
    url: https://api-rtp.uat.cstar.pagopa.it/rtp/service_providers
    x-internal: false
  - description: Production
    url: https://api-rtp.cstar.pagopa.it/rtp/service_providers
    x-internal: false

tags:
  - name: create
    description: Create operation.
  - name: read
    description: Read operation.
  - name: update
    description: Update operation.
  - name: delete
    description: Delete operation.

paths:
  /service-providers:
    get:
      operationId: getServiceProviders
      summary: Retrieves a list of all configured Service Providers.
      description: |
        Fetches a comprehensive list of all registered Technical Service Providers (TSPs) and their associated Service Providers (SPs). This allows clients to discover available providers on the PagoPA RTP platform.
      tags: [read]
      security:
        - oAuth2: [read_rtp_service_providers]
      parameters:
        - $ref: "#/components/parameters/RequestId"
        - $ref: "#/components/parameters/Version"
      responses:
        "200":
          # description: OK. The request was successful, and the list of service providers is returned in the response body.
          $ref: "#/components/responses/ServiceProvidersResponse"
        "400":
          # description: Bad Request. The request was malformed or contained invalid parameters, such as a poorly formatted RequestId header.
          $ref: "#/components/responses/Error"
        "401":
          # description: Unauthorized. The access token is missing, expired, or invalid.
          $ref: "#/components/responses/Error"
        "403":
          # description: Forbidden. The client is authenticated but does not have permission to access this resource. Check the OAuth2 scopes.
          $ref: "#/components/responses/Error"
        "406":
          # description: Not acceptable. The server cannot produce a response matching the list of acceptable values defined in the request's `Accept` header. Ensure `application/json` is accepted.
          $ref: "#/components/responses/Error"
        "429":
          # description: Too Many Requests. The client has sent too many requests in a given amount of time.
          $ref: "#/components/responses/Error"
        "500":
          # description: Internal Server Error. An unexpected error occurred on the server side.
          $ref: "#/components/responses/Error"
        default:
          # description: Unexpected Error. An error occurred that does not fit any other specific status code.
          $ref: "#/components/responses/Error"

components:
  # ============================================================================
  # Schemas.
  # ============================================================================
  schemas:
    # --------------------------------------------------------------------------
    # Basic types for CORS stuff.
    # --------------------------------------------------------------------------
    AccessControlAllowOrigin:
      description: |
        The `Access-Control-Allow-Origin` response header indicates whether the response can be shared with requesting code from the given origin.
      type: string
      pattern: "^[ -~]{1,2048}$"
      minLength: 1
      maxLength: 2048

    # --------------------------------------------------------------------------
    # Basic types for rate limit handling.
    # --------------------------------------------------------------------------
    RateLimitLimit:
      description: The maximum number of requests that the consumer is permitted to make in a time window.
      type: integer
      format: int32
      minimum: 1
      maximum: 240

    RateLimitReset:
      description: The number of seconds remaining until the rate limit window resets.
      type: integer
      format: int32
      minimum: 1
      maximum: 60

    RetryAfter:
      description: |
        The number of seconds to wait before making a new request, typically sent with 429 (Too Many Requests) responses.
      type: integer
      format: int32
      minimum: 1
      maximum: 240
    MtlsEnabled:
      description: "Mutual TLS (mTLS) is enabled for the provider. If true, a client certificate is required for communication."
      type: boolean
      example: true
    Role:
      description: "Defines the permissions or role of the Service Provider within the platform (e.g., 'ADMIN')."
      type: string
      pattern: "^[ -~]{1,64}$"
      minLength: 1
      maxLength: 64
      example: "ADMIN"
    Errors:
      description: |
        A generic error response container. The structure of the error can vary depending on where it originates (e.g., Application, API Gateway, or underlying Framework).
      oneOf:
      - $ref: '#/components/schemas/Error'
      - $ref: '#/components/schemas/ApimError'



    # --------------------------------------------------------------------------
    # Basic types for error handling.
    # --------------------------------------------------------------------------
    Error:
      description: Body of an error response.
      type: object
      additionalProperties: false
      properties:
        code:
          $ref: "#/components/schemas/ErrorCode"
        description:
          $ref: "#/components/schemas/ErrorDescription"
        status:
          $ref: "#/components/schemas/StatusCode"
      required:
        - code
        - description
        - status

    ApimError:
      description: An error originating from the API Management (APIM) layer.
      type: object
      additionalProperties: false
      properties:
        statusCode:
          $ref: '#/components/schemas/StatusCode'
        message:
          $ref: '#/components/schemas/ErrorDescription'
      required:
        - statusCode
        - message
      example:
        statusCode: 401
        message: "Invalid JWT."

    ErrorCode:
      description: Error code.
      type: string
      pattern: "^[A-F0-9]{9}$"
      minLength: 9
      maxLength: 9
      example: "01000000F"

    ErrorDescription:
      description: Error description.
      type: string
      pattern: "^[ -~]{0,256}$"
      minLength: 0
      maxLength: 256
      example: "Wrong party identifier"

    StatusCode:
      description: HTTP status code.
      type: integer
      format: int32
      minimum: 0
      maximum: 999
      example: 401

    # --------------------------------------------------------------------------
    # Basic types for technical stuff.
    # --------------------------------------------------------------------------
    RequestId:
      description: Identifier of the request.
      type: string
      format: uuid
      pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
      minLength: 36
      maxLength: 36
      example: "bd615b4a-066d-443e-8dd2-a28a39931fef"

    Version:
      description: Version of the required API.
      type: string
      pattern: '^v[1-9]\d{0,63}$'
      minLength: 1
      maxLength: 62
      example: "v1"

    # --------------------------------------------------------------------------
    # Domain specific basic types.
    # --------------------------------------------------------------------------
    Name:
      description: Name of the service provider.
      type: string
      pattern: "^[ -~]{1,64}$"
      minLength: 1
      maxLength: 64
      example: "Example Provider"

    ProviderId:
      description: A unique identifier assigned to the Service Provider.
      type: string
      pattern: "^[ -~]{1,64}$"
      minLength: 1
      maxLength: 64
      example: "PROVIDER123"

    ServiceEndpoint:
      description: The base URL where the provider's API services are exposed.
      type: string
      format: uri
      pattern: "^https://[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\\.[a-zA-Z]{2,})+(/[a-zA-Z0-9._~:/?#[\\]@!$&'()*+,;=]*)?$"
      minLength: 1
      maxLength: 256
      example: "https://api.example.org/v1/service"

    CertificateSerialNumber:
      description: The serial number of the public key certificate used for mTLS authentication, in hexadecimal format.
      type: string
      pattern: "^[A-F0-9]{1,64}$"
      minLength: 1
      maxLength: 64
      example: "A1B2C3D4E5F67890"

    # ------------------------------------------------------
    # Domain specific complex types.
    # ------------------------------------------------------
    OAuth2Config:
      description: Configuration details required to obtain an OAuth2 access token for communicating with the provider's service.
      type: object
      additionalProperties: false
      properties:
        token_endpoint:
          description: The URL of the provider's OAuth2 token endpoint.
          type: string
          format: uri
          pattern: "^https://[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\\.[a-zA-Z]{2,})+(/[a-zA-Z0-9._~:/?#[\\]@!$&'()*+,;=\\-]*)?$"
          minLength: 1
          maxLength: 256
          example: "https://auth.example.org/oauth2/token"
        method:
          description: The HTTP method to use for the token request.
          type: string
          enum: ["GET", "POST"]
          example: "POST"
        credentials_transport_mode:
          description: Specifies how the client credentials should be sent to the token endpoint.
          type: string
          enum: ["BASIC_AUTHENTICATION", "REQUEST_BODY"]
          example: "BASIC_AUTHENTICATION"
        client_id:
          description: The client ID for OAuth2 authentication.
          type: string
          minLength: 1
          maxLength: 128
          pattern: "^[ -~]{1,128}$"
          example: "example-client-id"
        client_secret_kv_url:
          description: The URL of a secret in an Azure Key Vault that stores the OAuth2 client secret. Used for secure secret management.
          type: string
          format: uri
          pattern: "^https://[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\\.[a-zA-Z]{2,})+(/[a-zA-Z0-9._~:/?#[\\]@!$&'()*+,;=\\-]*)?$"
          maxLength: 256
          example: "https://example-keyvault.vault.azure.net/secrets/example-secret"
        client_secret_env_var:
          description: The name of an environment variable that holds the OAuth2 client secret. An alternative to Key Vault for secret retrieval.
          type: string
          minLength: 1
          maxLength: 128
          pattern: "^[A-Za-z0-9_-]{1,128}$"
          example: "CLIENT_SECRET_ENV_VAR"
        scope:
          description: The OAuth2 scope(s) required for accessing the provider's service.
          type: string
          minLength: 1
          maxLength: 128
          pattern: "^[ -~]{1,128}$"
          example: "read write"
        mtls_enabled:
          description: Flag indicating if Mutual TLS (mTLS) is required for the OAuth2 token exchange.
          type: boolean
          example: true
      required:
        - token_endpoint
        - method

    TSP:
      description: Represents a Technical Service Provider, an entity that provides the technical infrastructure and services for one or more Service Providers.
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ProviderId"
        name:
          $ref: "#/components/schemas/Name"
        service_endpoint:
          $ref: "#/components/schemas/ServiceEndpoint"
        certificate_serial_number:
          $ref: "#/components/schemas/CertificateSerialNumber"
        mtls_enabled:
          $ref: "#/components/schemas/MtlsEnabled"
        oauth2:
          $ref: "#/components/schemas/OAuth2Config"
      required:
        - id
        - name
        - service_endpoint
        - certificate_serial_number
        - mtls_enabled
      example:
        id: "TSP001"
        name: "Example TSP"
        service_endpoint: "https://api.example.org/v1/service"
        certificate_serial_number: "A1B2C3D4E5F67890"
        mtls_enabled: true

    TSPs:
      description: A list of Technical Service Providers (TSPs).
      type: array
      minItems: 0
      maxItems: 128
      items:
        $ref: "#/components/schemas/TSP"
      example:
        - id: "TSP001"
          name: "Example TSP 1"
          service_endpoint: "https://api.example.org/v1/service1"
          certificate_serial_number: "A1B2C3D4E5F67890"
          mtls_enabled: true
        - id: "TSP002"
          name: "Example TSP 2"
          service_endpoint: "https://api.example.org/v1/service2"
          certificate_serial_number: "F6E5D4C3B2A10987"
          mtls_enabled: true

    SP:
      description: Represents a Service Provider, a business entity that offers services to end-users by leveraging a Technical Service Provider.
      type: object
      additionalProperties: false
      properties:
        id:
          $ref: "#/components/schemas/ProviderId"
        name:
          description: The ID of the Technical Service Provider that this SP is associated with.
          $ref: "#/components/schemas/Name"
        tsp_id:
          $ref: "#/components/schemas/ProviderId"
        role:
          $ref: "#/components/schemas/Role"
      required:
        - id
        - name
        - tsp_id
      example:
        id: "SP001"
        name: "Example Service Provider"
        tsp_id: "TSP001"
        role: "ADMIN"

    SPs:
      description: A list of Service Providers (SPs).
      type: array
      minItems: 0
      maxItems: 128
      items:
        $ref: "#/components/schemas/SP"
      example:
        - id: "SP001"
          name: "Example Service Provider 1"
          tsp_id: "TSP001"
          role: "ADMIN"
        - id: "SP002"
          name: "Example Service Provider 2"
          tsp_id: "TSP002"
          role: "ADMIN"

    ServiceProviders:
      description: A top-level object containing lists of all Technical Service Providers (TSPs) and Service Providers (SPs).
      type: object
      additionalProperties: false
      properties:
        tsps:
          $ref: "#/components/schemas/TSPs"
        sps:
          $ref: "#/components/schemas/SPs"
      required:
        - tsps
        - sps
      example:
        tsps:
          - id: "TSP001"
            name: "Example TSP 1"
            service_endpoint: "https://api.example.org/v1/service1"
            certificate_serial_number: "A1B2C3D4E5F67890"
            mtls_enabled: true
          - id: "TSP002"
            name: "Example TSP 2"
            service_endpoint: "https://api.example.org/v1/service2"
            certificate_serial_number: "F6E5D4C3B2A10987"
            mtls_enabled: true
        sps:
          - id: "SP001"
            name: "Example Service Provider 1"
            tsp_id: "TSP001"
            role: "ADMIN"
          - id: "SP002"
            name: "Example Service Provider 2"
            tsp_id: "TSP002"
            role: "ADMIN"

  # ============================================================================
  # Parameters.
  # ============================================================================
  parameters:
    RequestId:
      name: RequestId
      in: header
      description: Unique identifier for the API request, used for tracing and correlation. Must be a valid UUID.
      required: true
      schema:
        $ref: "#/components/schemas/RequestId"

    Version:
      name: Version
      in: header
      description: Specifies the version of the API the client wishes to use.
      required: true
      schema:
        $ref: "#/components/schemas/Version"

  # ============================================================================
  # Responses
  # ============================================================================
  responses:
    Error:
      description: A generic error response body used for all client and server errors.
      headers:
        Access-Control-Allow-Origin:
          description: |
            Indicates whether the response can be shared with requesting code
            from the given origin.
          required: false
          schema:
            $ref: "#/components/schemas/AccessControlAllowOrigin"
        RateLimit-Limit:
          description: The number of allowed requests in the current period.
          required: false
          schema:
            $ref: "#/components/schemas/RateLimitLimit"
        RateLimit-Reset:
          description: The number of seconds left in the current period
          required: false
          schema:
            $ref: "#/components/schemas/RateLimitReset"
        Retry-After:
          description: |
            The number of seconds to wait before allowing a follow-up request.
          required: false
          schema:
            $ref: "#/components/schemas/RetryAfter"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
        text/*:
          schema:
            type: string
            pattern: "^[ -~]{0,65535}$"
            minLength: 0
            maxLength: 65535

    ServiceProvidersResponse:
      description: A successful response containing the full list of TSPs and SPs.
      headers:
        Access-Control-Allow-Origin:
          description: |
            Indicates whether the response can be shared with requesting code
            from the given origin.
          required: false
          schema:
            $ref: "#/components/schemas/AccessControlAllowOrigin"
        RateLimit-Limit:
          description: The number of allowed requests in the current period.
          required: false
          schema:
            $ref: "#/components/schemas/RateLimitLimit"
        RateLimit-Reset:
          description: The number of seconds left in the current period.
          required: false
          schema:
            $ref: "#/components/schemas/RateLimitReset"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServiceProviders"
  # ============================================================================
  # Security schemes.
  # ============================================================================
  securitySchemes:
    oAuth2:
      description: |
        Authentication is handled via OAuth2 Client Credentials flow. Clients must obtain a Bearer token (JWT), which conforms to RFC8725, and include it in the `Authorization` header of their requests.
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /token
          refreshUrl: /token
          scopes:
            read_rtp_service_providers: Grants permission to read the list of RTP service providers.
