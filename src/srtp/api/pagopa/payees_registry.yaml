openapi: 3.0.3

info:
  title: RTP Payees  API.
  version: 1.0.0
  description: |
    API for querying the registry of **Payees** (creditors) who are enabled to use PagoPA as their Request-to-Pay (RTP) Service Provider.
  contact:
    name: PagoPA S.p.A.
    email: rtp@pagopa.it

servers:
  - description: Development/Test
    url: https://api-rtp.dev.cstar.pagopa.it
    x-internal: true
  - description: User Acceptance Test
    url: https://api-rtp.uat.cstar.pagopa.it
    x-internal: false
  - description: Production
    url: https://api-rtp.cstar.pagopa.it
    x-internal: false

tags:
  - name: read
    description: Operations to read from the registry, such as retrieving the list of Payees.

paths:
  /payees:
    get:
      operationId: getPayees
      summary: Retrieves a paginated list of Payees from the registry.
      description: |
        Queries the registry and returns a paginated list of all Payees (creditors) activated on the PagoPA RTP platform. Use the `page` and `size` query parameters to navigate through the directory.
      tags: [read]
      security:
        - oAuth2: [read_rtp_payees]
      parameters:
        - $ref: '#/components/parameters/RequestId'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
      responses:
        "200":
          # description: OK. The request was successful, and a page of Payees from the registry is returned.
          $ref: '#/components/responses/PageOfPayees'
        "400":
          # description: Bad Request. The request was malformed, for example due to invalid pagination parameters.
          $ref: '#/components/responses/Error'
        "401":
          # description: Unauthorized. The access token is missing, expired, or invalid.
          $ref: '#/components/responses/Error'
        "403":
          # description: Forbidden. The client is authenticated but does not have the required permissions to access this resource.
          $ref: '#/components/responses/Error'
        "406":
          # description: Not Acceptable. The server cannot produce a response matching the `Accept` header. Ensure you accept `application/json`.
          $ref: '#/components/responses/Error'
        "429":
          # description: Too Many Requests. The client has exceeded the rate limit.
          $ref: '#/components/responses/Error'
        "500":
          # description: Internal Server Error. An unexpected error occurred on the server.
          $ref: '#/components/responses/Error'
        default:
          # description: Unexpected Error. An error occurred that is not covered by other status codes.
          $ref: '#/components/responses/Error'

components:
  # ============================================================================
  # Schemas.
  # ============================================================================
  schemas:
    # --------------------------------------------------------------------------
    # Basic types for CORS stuff.
    # --------------------------------------------------------------------------
    AccessControlAllowOrigin:
      description: |
        The `Access-Control-Allow-Origin` response header indicates whether the response can be shared with requesting code from the given origin.
      type: string
      pattern: "^[ -~]{1,2048}$"
      minLength: 1
      maxLength: 2048

    # --------------------------------------------------------------------------
    # Basic types for rate limit handling.
    # --------------------------------------------------------------------------
    RateLimitLimit:
      description: The maximum number of requests that the consumer is permitted to make in a time window.
      type: integer
      format: int32
      minimum: 1
      maximum: 240

    RateLimitReset:
      description: The number of seconds remaining until the rate limit window resets.
      type: integer
      format: int32
      minimum: 1
      maximum: 60

    RetryAfter:
      description: |
        The number of seconds to wait before making a new request, typically sent with 429 (Too Many Requests) responses.
      type: integer
      format: int32
      minimum: 1
      maximum: 240

    # --------------------------------------------------------------------------
    # Basic types for paging.
    # --------------------------------------------------------------------------
    PageNumber:
      description: The page number to retrieve (0-indexed).
      type: integer
      format: int32
      minimum: 0
      maximum: 2147483647
      example: 1

    PageSize:
      description: The number of registry entries to include per page.
      type: integer
      format: int32
      minimum: 1
      maximum: 128
      example: 20

    TotalElements:
      description: The total number of elements available across all pages in the registry.
      type: integer
      format: int64
      minimum: 0
      maximum: 9223372036854775807
      example: 20

    TotalPages:
      description: The total number of pages available based on the current page size.
      type: integer
      format: int64
      minimum: 0
      maximum: 9223372036854775807
      example: 20

    # --------------------------------------------------------------------------
    # Basic types for error handling.
    # --------------------------------------------------------------------------
    ErrorCode:
      description: A unique, machine-readable code identifying the specific error.
      type: string
      pattern: "^[A-F0-9]{9}$"
      minLength: 9
      maxLength: 9
      example: "01000000F"

    ErrorDescription:
      description: A human-readable description of the error.
      type: string
      pattern: "^[ -~]{0,256}$"
      minLength: 0
      maxLength: 256
      example: "Wrong party identifier"

    StatusCode:
      description: The HTTP status code associated with the error.
      type: integer
      format: int32
      minimum: 0
      maximum: 999
      example: 401

    # --------------------------------------------------------------------------
    # Basic types for technical stuff.
    # --------------------------------------------------------------------------
    RequestId:
      description: A unique identifier for tracking a single request across system boundaries, essential for logging and debugging.
      type: string
      format: uuid
      pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
      minLength: 36
      maxLength: 36
      example: "bd615b4a-066d-443e-8dd2-a28a39931fef"

    Version:
      description: The version of the API being requested.
      type: string
      pattern: "^[ -~]{1,64}$"
      minLength: 1
      maxLength: 64
      example: "v1"

    # --------------------------------------------------------------------------
    # Domain specific basic types.
    # --------------------------------------------------------------------------
    Name:
      description: The official registered name of the Payee.
      type: string
      pattern: "^[ -~]{1,64}$"
      minLength: 1
      maxLength: 64
      example: "Roma Capitale"

    PayeeId:
      description: The unique identifier of the Payee in the registry. This is the Italian 11-digit VAT number (*Partita IVA*) or 16-digit fiscal code (*Codice Fiscale*).
      type: string
      pattern: "\\d{11}|\\d{16}"
      minLength: 11
      maxLength: 16
      example: "02438750586"

    # --------------------------------------------------------------------------
    # Complex types for paging.
    # --------------------------------------------------------------------------
    PageMetadata:
      description: Contains metadata for navigating the paginated registry query results.
      type: object
      additionalProperties: false
      properties:
        totalElements:
          $ref: '#/components/schemas/TotalElements'
        totalPages:
          $ref: '#/components/schemas/TotalPages'
        page:
          $ref: '#/components/schemas/PageNumber'
        size:
          $ref: '#/components/schemas/PageSize'
      required:
        - totalElements
        - totalPages
        - page
        - size
      example:
        totalElements: 198
        totalPages: 10
        page: 5
        size: 20

    # --------------------------------------------------------------------------
    # Complex type for error handling.
    # --------------------------------------------------------------------------
    Error:
      description: A single, detailed error object.
      type: object
      additionalProperties: false
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        description:
          $ref: '#/components/schemas/ErrorDescription'
      required:
        - code
        - description
      example:
        code: "01000000F"
        description: "Wrong party identifier"

    Errors:
      description: |
        A generic error response container. The structure of the error can vary depending on where it originates (e.g., Application, API Gateway, or underlying Framework).
      oneOf:
        - $ref: '#/components/schemas/Type1Error'
        - $ref: '#/components/schemas/Type2Error'
        - $ref: '#/components/schemas/Type3Error'

    Type1Error:
      description: An error originating from the business logic of the application. Contains a list of specific errors.
      type: object
      additionalProperties: false
      properties:
        errors:
          type: array
          minItems: 1
          maxItems: 32
          items:
            $ref: '#/components/schemas/Error'
      required:
        - errors
      example:
        errors:
          - code: "01000000F"
            description: "Wrong party identifier"

    Type2Error:
      description: An error originating from the API Management (APIM) layer.
      type: object
      additionalProperties: false
      properties:
        statusCode:
          $ref: '#/components/schemas/StatusCode'
        message:
          $ref: '#/components/schemas/ErrorDescription'
      required:
        - statusCode
        - message
      example:
        statusCode: 401
        message: "Invalid JWT."

    Type3Error:
      description: A generic error originating from the underlying web framework.
      type: object
      additionalProperties: false
      properties:
        timestamp:
          description: Timestamp the error occurred.
          type: string
          format: date-time
          minLength: 19
          maxLength: 29
          pattern: "^((?:(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?))(Z|[\\+-]\\d{2}:\\d{2})?)$"
        path:
          description: API path where the error occurred.
          type: string
          pattern: "^[ -~]{1,1024}$"
          minLength: 1
          maxLength: 1024
        status:
          $ref: '#/components/schemas/StatusCode'
        error:
          $ref: '#/components/schemas/ErrorDescription'
        requestId:
          description: The ID of the request that caused the error.
          type: string
          pattern: "^[ -~]{1,128}$"
          minLength: 1
          maxLength: 128
      required:
        - timestamp
        - path
        - status
        - error
        - requestId
      example:
        timestamp: "2024-12-31T09:54:01.763+00:00"
        path: "/payees"
        status: 415
        error: "Unsupported Media Type"
        requestId: "3fb00d0f-416"

    # ------------------------------------------------------
    # Domain specific complex types.
    # ------------------------------------------------------
    Payee:
      description: Represents a single Payee entry in the registry.
      type: object
      additionalProperties: false
      properties:
        payeeId:
          $ref: '#/components/schemas/PayeeId'
        name:
          $ref: '#/components/schemas/Name'
      required:
        - payeeId
        - name
      example:
        payeeId: "02438750586"
        name: "Roma Capitale"

    Payees:
      description: A list of Payee entries from the registry.
      type: array
      minItems: 0
      maxItems: 128
      items:
        $ref: '#/components/schemas/Payee'
      example:
        - payeeId: "02438750586"
          name: "Roma Capitale"
        - payeeId: "80015010723"
          name: "Comune di Bari"

    PageOfPayees:
      description: A single page from the registry results, containing a list of Payees and pagination metadata.
      type: object
      additionalProperties: false
      properties:
        payees:
          $ref: '#/components/schemas/Payees'
        page:
          $ref: '#/components/schemas/PageMetadata'
      required:
        - payees
        - page
      example:
        payees:
          - payeeId: "02438750586"
            name: "Roma Capitale"
          - payeeId: "80015010723"
            name: "Comune di Bari"
        page:
          totalElements: 2
          totalPages: 2
          page: 1
          size: 1

  # ============================================================================
  # Parameters.
  # ============================================================================
  parameters:
    PageNumber:
      name: page
      in: query
      description: The page number of the registry results to retrieve (0-indexed).
      required: true
      schema:
        $ref: '#/components/schemas/PageNumber'

    PageSize:
      name: size
      in: query
      description: The number of registry entries to return per page.
      required: true
      schema:
        $ref: '#/components/schemas/PageSize'

    RequestId:
      name: RequestId
      in: header
      description: Unique identifier for the API request, used for tracing and correlation.
      required: true
      schema:
        $ref: '#/components/schemas/RequestId'

    Version:
      name: Version
      in: header
      description: Specifies the version of the API the client wishes to use.
      required: true
      schema:
        $ref: '#/components/schemas/Version'

  # ============================================================================
  # Responses
  # ============================================================================
  responses:
    Error:
      description: A generic error response returned by the API.
      headers:
        Access-Control-Allow-Origin:
          description: |
            Indicates whether the response can be shared with requesting code from the given origin.
          required: false
          schema:
            $ref: '#/components/schemas/AccessControlAllowOrigin'
        RateLimit-Limit:
          description: The number of allowed requests in the current period.
          required: false
          schema:
            $ref: '#/components/schemas/RateLimitLimit'
        RateLimit-Reset:
          description: The number of seconds left in the current period
          required: false
          schema:
            $ref: '#/components/schemas/RateLimitReset'
        Retry-After:
          description: |
            The number of seconds to wait before allowing a follow-up request.
          required: false
          schema:
            $ref: '#/components/schemas/RetryAfter'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
        text/*:
          schema:
            type: string
            pattern: "^[ -~]{0,65535}$"
            maxLength: 65535

    PageOfPayees:
      description: Response to the request to get Payees.
      headers:
        Access-Control-Allow-Origin:
          description: |
            Indicates whether the response can be shared with requesting code
            from the given origin.
          required: false
          schema:
            $ref: '#/components/schemas/AccessControlAllowOrigin'
        RateLimit-Limit:
          description: The number of allowed requests in the current period.
          required: false
          schema:
            $ref: '#/components/schemas/RateLimitLimit'
        RateLimit-Reset:
          description: The number of seconds left in the current period.
          required: false
          schema:
            $ref: '#/components/schemas/RateLimitReset'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PageOfPayees'

  # ============================================================================
  # Security schemes.
  # ============================================================================
  securitySchemes:
    oAuth2:
      description: |
        Authentication is handled via OAuth2 Client Credentials flow. Clients must obtain a Bearer token (JWT), which conforms to RFC8725, and include it in the `Authorization` header of their requests.
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /token
          refreshUrl: /token
          scopes:
            read_rtp_payees: Grants permission to read the RTP Payees registry.
